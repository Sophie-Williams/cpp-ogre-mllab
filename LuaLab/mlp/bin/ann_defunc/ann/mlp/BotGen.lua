local BotGen={};function BotGen.createNPC(MLP, dataInterface)	BotGen.writter=dofile("Util\\logger.lua");	BotGen.writter.create("Bot.lua");		BotGen.writter.println("local Bot={};");	BotGen.writter.println("");		BotGen.create_initialize(MLP);	BotGen.writter.println("");		BotGen.create_think(dataInterface);	BotGen.writter.println("");		BotGen.writter.println("return Bot;");	BotGen.writter.close();endfunction BotGen.create_think(dataInterface)	BotGen.writter.println("function Bot.think(agent)");	BotGen.writter.println("\tlocal agentId=agent:getAgentId();");	BotGen.writter.println("\tlocal brain=Bot[agentId].brain;");		BotGen.writter.println("\t--apply inputs to the neural network");	local inputCount=dataInterface.getInputCount();	for i=1, inputCount do		local inputName=dataInterface.getInputName(i);		BotGen.writter.println("\tbrain[1][" .. i .. "].val=agent:" .. dataInterface.getInputAPI(i));	end		BotGen.writter.println("");		BotGen.writter.println("\t--compute outputs using neural network");	BotGen.writter.println("\tfor layerIndex=2, brain.layerCount do");	BotGen.writter.println("\t\tfor i=1, brain[layerIndex].neuronCount do");	BotGen.writter.println("\t\t\tlocal sum=brain[layerIndex][i].bias;");	BotGen.writter.println("\t\t\tfor j=1, brain[layerIndex-1].neuronCount do");	BotGen.writter.println("\t\t\t\tsum=sum+brain[layerIndex-1][j].val * brain[layerIndex][i][j];");	BotGen.writter.println("\t\t\tend");	BotGen.writter.println("\t\t\tbrain[layerIndex][i].val=1/(math.exp(-sum)+1);");	BotGen.writter.println("\t\tend");	BotGen.writter.println("\tend");		BotGen.writter.println("\t--convert neural network output into bot action");	BotGen.writter.println("\tlocal bestIndex=1;");	BotGen.writter.println("\tlocal firingDegree=-1000;");	BotGen.writter.println("\tfor i=1, " .. dataInterface.getOutputCount() .. " do");	BotGen.writter.println("\t\tif brain[brain.layerCount][i].val > firingDegree then");	BotGen.writter.println("\t\t\tfiringDegree=brain[brain.layerCount][i].val;");	BotGen.writter.println("\t\t\tbestIndex=i;");	BotGen.writter.println("\t\tend");	BotGen.writter.println("\tend");		for i=1, dataInterface.getOutputCount() do		BotGen.writter.println("\tif bestIndex == " .. i .. " then");		BotGen.writter.println("\t\tagent:" .. dataInterface.getOutputAPI(i) .. ";");		BotGen.writter.println("\tend");	end		BotGen.writter.println("end");endfunction BotGen.create_initialize(MLP)	BotGen.writter.println("function Bot.initialize(agent)");		BotGen.writter.println("\tlocal brain={};");	BotGen.writter.println("\tbrain.layerCount=" .. MLP.layerCount .. ";");	BotGen.writter.println("");		for layerIndex=1, MLP.layerCount do		BotGen.writter.println("\tbrain[" .. layerIndex .. "]={};");		BotGen.writter.println("\tbrain[" .. layerIndex .. "].neuronCount=" .. MLP[layerIndex].neuronCount .. ";");		for i = 1, MLP[layerIndex].neuronCount do			BotGen.writter.println("\tbrain[" .. layerIndex .. "][" .. i .. "]={};");			BotGen.writter.println("\tbrain[" .. layerIndex .. "][" .. i .. "].val=0;");			BotGen.writter.println("\tbrain[" .. layerIndex .. "][" .. i .. "].bias=" .. MLP[layerIndex][i].bias .. ";");			if layerIndex > 1 then				for j=1, MLP[layerIndex-1].neuronCount do					BotGen.writter.println("\tbrain[" .. layerIndex .. "][" .. i .. "][" .. j .. "]=" .. MLP[layerIndex][i][j] .. ";");				end			end		end		BotGen.writter.println("");	end		BotGen.writter.println("\tlocal agentId=agent:getAgentId();");	BotGen.writter.println("\tBot[agentId]={};");	BotGen.writter.println("\tBot[agentId].brain=brain;");		BotGen.writter.println("end");endreturn BotGen;