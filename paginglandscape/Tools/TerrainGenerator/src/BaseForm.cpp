#include "BaseForm.h"

namespace TerrainGenerator {
	//-------------------------------------------------------------------------
	BaseForm::BaseForm(void)
    {
        mMapUtil = new  Ogre::MapUtil();
		// Creates OGRE root and sets up defined resource locations
		mMapUtil->init();
        InitializeComponent();
        //
        //TODO: Add the constructor code here
        //

        setAppDefaults();
        setGenDefaults();

        // Create Tooltip icon used for terrain property descriptions
        HelpToolTip = gcnew ToolTip();
        HelpToolTip->AutoPopDelay = 5000;
        HelpToolTip->InitialDelay = 1000;
        HelpToolTip->ReshowDelay = 500;
        HelpToolTip->ShowAlways = true;
    }
	//-------------------------------------------------------------------------
	BaseForm::~BaseForm()
    {
        delete mMapUtil;
        if (components)
        {
            delete components;
        }
    }
	//-------------------------------------------------------------------------
	System::Void BaseForm::createGenFile()
    {
        // Duplicating layout of template.default.gen.cfg

		System::IO::FileStream^ fs = System::IO::File::Create( 
			OutputFolder +
            GTerrainNameTextBox->Text + 
			".gen.cfg"); 
        System::IO::StreamWriter^ sw = gcnew System::IO::StreamWriter(fs);

        sw->WriteLine("####### Generated by Terrain Generator #######");
        sw->WriteLine("####### FileName: " + GTerrainNameTextBox->Text + ".gen.cfg ######");
        sw->WriteLine("####### GEN FILE: This file tells mapsplitter how to process the heightmap and colormap ######");
        sw->WriteLine("");

        sw->WriteLine("TerrainName=" + GTerrainNameTextBox->Text);
        sw->WriteLine("");

        sw->WriteLine(createComment("General Options"));
        sw->WriteLine(createAssignment(GGroupNameLabel,GGroupNameTextBox));
        sw->WriteLine(createAssignment(GHeightMapFileNameLabel,GHeightMapFileNameTextBox));
        sw->WriteLine(createAssignment(GHeightMapExtensionLabel,GHeightMapExtensionTextBox));
        sw->WriteLine(createAssignment(HeightMapExportExtensionLabel,HeightMapExportExtensionTextBox));
        sw->WriteLine(createAssignment(GColorMapFileNameLabel,GColorMapFileNameTextBox));
        sw->WriteLine(createAssignment(GColorMapExtensionLabel,GColorMapExtensionTextBox));
        sw->WriteLine(createAssignment(ColorMapExportExtensionLabel,ColorMapExportExtensionTextBox));
        sw->WriteLine(createAssignment(PagedCheckBox));
        sw->WriteLine("OutDirectory=" + OutputFolder + GTerrainNameTextBox->Text);
        sw->WriteLine(createAssignment(GTerrainScaleXLabel,GTerrainScaleXTextBox));
        sw->WriteLine(createAssignment(GTerrainScaleYLabel,GTerrainScaleYTextBox));
        sw->WriteLine(createAssignment(GTerrainScaleZLabel,GTerrainScaleZTextBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Paging Related Options (no effect if Paged=no)"));
        sw->WriteLine(createAssignment(GPageSizeLabel,GPageSizeTextBox));
        sw->WriteLine(createAssignment(GTileSizeLabel,GTileSizeTextBox));
        sw->WriteLine(createAssignment(GData2DFormatLabel,GData2DFormatComboBox));
        sw->WriteLine(createAssignment(GMaxValueLabel,GMaxValueTextBox));
        sw->WriteLine(createAssignment(GMinValueLabel,GMinValueTextBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Color Map Options"));
        sw->WriteLine(createAssignment(GColorMapStretchFactorLabel,GColorMapStretchFactorTextBox));
        sw->WriteLine(createAssignment(ColorMapSplitCheckBox));
        sw->WriteLine(createAssignment(LitColorMapSplitCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Height Map Options"));
        sw->WriteLine(createAssignment(HeightMapCheckBox));
        sw->WriteLine(createAssignment(InfiniteMapCheckBox));
        sw->WriteLine(createAssignment(HeightMapBlurFactorLabel,HeightMapBlurFactorTextBox));
        sw->WriteLine(createAssignment(EqualizeCheckBox));
        sw->WriteLine(createAssignment(MiniMapCheckBox));
        sw->WriteLine(createAssignment(MiniMapWidthLabel,MiniMapWidthTextBox));
        sw->WriteLine(createAssignment(MiniMapHeightLabel,MiniMapHeightTextBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Normals Options"));
        sw->WriteLine(createAssignment(NormalMapCheckBox));
        sw->WriteLine(createAssignment(HeightNormalMapCheckBox));
        sw->WriteLine(createAssignment(ColorMapGenerateCheckBox));
        sw->WriteLine(createAssignment(LitColorMapGenerateCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Splatting Options"));
        sw->WriteLine(createAssignment(NumMatHeightSplatLabel,NumMatHeightSplatTextBox));
        writeRichTextBoxContents(sw,GSetMaterialHeightRichTextBox);
        writeRichTextBoxContents(sw,GSetMaterialColorRichTextBox);
        writeRichTextBoxContents(sw,GSetSplatFileNamesRichTextBox);
        sw->WriteLine(createAssignment(AvgColorsExistsCheckBox));
        sw->WriteLine(createAssignment(BaseMapCheckBox));
        sw->WriteLine(createAssignment(LitBaseMapCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Maps used for Splatting"));
        sw->WriteLine(createAssignment(CoverageMapCheckBox));
        sw->WriteLine(createAssignment(AlphaMapsCheckBox));
        sw->WriteLine(createAssignment(AlphaSplatRGBAMapsCheckBox));
        sw->WriteLine(createAssignment(AlphaSplatLightMapsCheckBox));
        sw->WriteLine(createAssignment(RGBMapsCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Lighting Options"));
        sw->WriteLine(createAssignment(HorizonMapCheckBox));
        sw->WriteLine(createAssignment(ElevationMapCheckBox));
        sw->WriteLine(createAssignment(ZHorizonCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Visibility Options"));
        sw->WriteLine(createAssignment(PVSMapCheckBox));
        sw->WriteLine("");

        sw->Close();
        fs->Close();
    }

    //-------------------------------------------------------------------------
    System::Void BaseForm::createRunTimeFile()
    {
        // Duplicating layout of template.default.gen.cfg

        System::IO::FileStream^ fs = System::IO::File::Create(
            OutputFolder + GTerrainNameTextBox->Text + ".cfg");
        System::IO::StreamWriter^ sw = gcnew System::IO::StreamWriter(fs);

        sw->WriteLine("####### Generated by Terrain Generator #######");
        sw->WriteLine("####### FileName: " + GTerrainNameTextBox->Text + ".cfg ######");
        sw->WriteLine("####### RUNTIME FILE: This is the run-time file used to load the terrain into the scene ######");
        sw->WriteLine("");

        sw->WriteLine("TerrainName=" + GTerrainNameTextBox->Text);
        sw->WriteLine("");

        sw->WriteLine(createComment("General Options"));
        sw->WriteLine(createAssignment(RGroupNameLabel,RGroupNameTextBox));

        if( ResourceFormatComboBox->Text != "Already in Path" )
        {
            sw->WriteLine(FormatLabel->Text + FormatTextBox->Text);
        }

        sw->WriteLine(createAssignment(RHeightMapFileNameLabel,RHeightMapFileNameTextBox));
        sw->WriteLine(createAssignment(RHeightMapExtensionLabel,RHeightMapExtensionTextBox));
        sw->WriteLine(createAssignment(RColorMapFileNameLabel,RColorMapFileNameTextBox));
        sw->WriteLine(createAssignment(RColorMapExtensionLabel,RColorMapExtensionTextBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Paging Related Options (no effect if Paged=no)"));
        sw->WriteLine(createAssignment(PageWidthLabel,PageWidthTextBox));
        sw->WriteLine(createAssignment(PageHeightLabel,PageHeightTextBox));
        sw->WriteLine(createAssignment(RPageSizeLabel,RPageSizeTextBox));
        sw->WriteLine(createAssignment(RTileSizeLabel,RTileSizeTextBox));
        sw->WriteLine(createAssignment(RData2DFormatLabel,RData2DFormatTextBox));
        sw->WriteLine(createAssignment(RMaxValueLabel,RMaxValueTextBox));
        sw->WriteLine(createAssignment(RMinValueLabel,RMinValueTextBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Terrain Properties"));
        sw->WriteLine(createAssignment(RTerrainScaleXLabel,RTerrainScaleXTextBox));
        sw->WriteLine(createAssignment(RTerrainScaleYLabel,RTerrainScaleYTextBox));
        sw->WriteLine(createAssignment(RTerrainScaleZLabel,RTerrainScaleZTextBox));
        sw->WriteLine(createAssignment(DeformableCheckBox));
        sw->WriteLine(createAssignment(VertexCompressionCheckBox));
        sw->WriteLine(createAssignment(VertexProgramMorphCheckBox));
        sw->WriteLine(createAssignment(LODMorphStartLabel,LODMorphStartTextBox));
        sw->WriteLine(createAssignment(MaxPixelErrorLabel,MaxPixelErrorTextBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Lighting Options"));
        sw->WriteLine(createAssignment(VertexNormalsCheckBox));
        sw->WriteLine(createAssignment(VertexLitCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Texture Properties"));
        sw->WriteLine(createAssignment(RColorMapStretchFactorLabel,RColorMapStretchFactorTextBox));
        sw->WriteLine(createAssignment(NumTextureFormatSupportedLabel,NumTextureFormatSupportedTextBox));
        writeRichTextBoxContents(sw,TextureFormatSupportedRichTextBox);
        sw->WriteLine(createAssignment(TextureFormatLabel,TextureFormatTextBox));
        sw->WriteLine(createAssignment(RNumMatHeightSplatLabel,RNumMatHeightSplatTextBox));
        sw->WriteLine("");
        writeRichTextBoxContents(sw,RSetMaterialHeightRichTextBox);
        writeRichTextBoxContents(sw,RSetMaterialColorRichTextBox);
        writeRichTextBoxContents(sw,RSetSplatFileNamesRichTextBox);
        sw->WriteLine(createAssignment(BigImageCheckBox));
        sw->WriteLine(createAssignment(VertexColorsCheckBox));
        sw->WriteLine(createAssignment(CoverageVertexColorCheckBox));
        sw->WriteLine(createAssignment(BaseVertexColorCheckBox));
        sw->WriteLine(createAssignment(BaseVertexShadowCheckBox));
        sw->WriteLine(createAssignment(BaseVertexInstantColorCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Performance Options"));
        sw->WriteLine(createAssignment(VisibleRenderablesLabel,VisibleRenderablesTextBox));
        sw->WriteLine(createAssignment(DistanceLODLabel,DistanceLODTextBox));
        sw->WriteLine(createAssignment(MaxRenderLevelLabel,MaxRenderLevelTextBox));
        sw->WriteLine(createAssignment(NumRenderablesLoadingLabel,NumRenderablesLoadingTextBox));
        sw->WriteLine(createAssignment(MaxAdjacentPagesLabel,MaxAdjacentPagesTextBox));
        sw->WriteLine(createAssignment(MaxPreloadedPagesLabel,MaxPreloadedPagesTextBox));
        sw->WriteLine(createAssignment(ChangeFactorLabel,ChangeFactorTextBox));
        sw->WriteLine(createAssignment(CameraThresholdLabel,CameraThresholdTextBox));
        sw->WriteLine(createAssignment(MaxNumRenderablesLabel,MaxNumRenderablesTextBox));
        sw->WriteLine(createAssignment(IncrementRenderablesLabel,IncrementRenderablesTextBox));
        sw->WriteLine(createAssignment(MaxNumTilesLabel,MaxNumTilesTextBox));
        sw->WriteLine(createAssignment(IncrementTilesLabel,IncrementTilesTextBox));
        sw->WriteLine(createAssignment(HorizonVisibilityComputingCheckBox));
        sw->WriteLine("");

        sw->WriteLine(createComment("Camera Properties (on Terrain Load)"));
        sw->WriteLine(createAssignment(BaseCameraViewpointxLabel,BaseCameraViewpointxTextBox));
        sw->WriteLine(createAssignment(BaseCameraViewpointyLabel,BaseCameraViewpointyTextBox));
        sw->WriteLine(createAssignment(BaseCameraViewpointzLabel,BaseCameraViewpointzTextBox));
        sw->WriteLine(createAssignment(BaselookatxLabel,BaselookatxTextBox));
        sw->WriteLine(createAssignment(BaselookatyLabel,BaselookatyTextBox));
        sw->WriteLine(createAssignment(BaselookatzLabel,BaselookatzTextBox));
        sw->WriteLine("");

        sw->Close();
        fs->Close();
    }

    //-------------------------------------------------------------------------
    System::Void BaseForm::createMapToolFile()
    {
        System::IO::FileStream^ fs = System::IO::File::Create("maptool.cfg"); 
        System::IO::StreamWriter^ sw = gcnew System::IO::StreamWriter(fs);

        writeRichTextBoxContents(sw,MapToolRichTextBox);

        sw->Close();
        fs->Close();
    }
    //-------------------------------------------------------------------------
    // populate MapToolRichTextBox with maptool.cfg's content
    System::Void BaseForm::populateMapToolData()
    {
        MapToolRichTextBox->Text =
            "DefaultMap=" + GTerrainNameTextBox->Text + "\n" +
            GTerrainNameTextBox->Text + "=" + GTerrainNameTextBox->Text + ".gen\n" +
            createAssignment(GGroupNameLabel,GGroupNameTextBox) + "\n" +
            "BatchMode=yes";
    }
    //-------------------------------------------------------------------------
    System::String^ BaseForm::createAssignment( System::Windows::Forms::Label^ l, System::Windows::Forms::TextBox^ t )
    {
        // turn the label's trailing ':' into '='
        System::String^ Label = l->Text;
        Label = Label->Substring(0,Label->IndexOf(':')) + "=";
        return Label + t->Text;
    }
    //-------------------------------------------------------------------------
    System::String^ BaseForm::createAssignment( System::Windows::Forms::Label^ l, System::Windows::Forms::ComboBox^ c )
    {
        // turn the label's trailing ':' into '='
        System::String^ Label = l->Text;
        Label = Label->Substring(0,Label->IndexOf(':')) + "=";
        return Label + c->Text;
    }

    //-------------------------------------------------------------------------
    System::String^ BaseForm::createAssignment( System::Windows::Forms::CheckBox^ c )
    {
        // turn the label's trailing ':' into '='
        System::String^ Label = c->Text;
        Label = Label->Substring(0,Label->IndexOf(':')) + "=";
        return Label + evaluateCheckBox(c);
    }

    System::String^	BaseForm::createComment( System::String^ text )
    {
        return "## " + text + " ##";
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::writeRichTextBoxContents( System::IO::StreamWriter^ sw, System::Windows::Forms::RichTextBox^ rtb )
    {
        System::String^ FullText = rtb->Text;
        System::String^ Line;

        int index;
        while( FullText->Length >= 0 )
        {
            index = FullText->IndexOf('\n');
            if( index < 0 )
            {
                Line = FullText->Substring(0,FullText->Length);
                sw->WriteLine(Line);
                break;
            }
            else Line = FullText->Substring(0,FullText->IndexOf('\n'));

            FullText = FullText->Substring(FullText->IndexOf('\n') + 1);
            sw->WriteLine(Line);
        }

        sw->WriteLine("");
    }
    //-------------------------------------------------------------------------
    System::String^ BaseForm::evaluateCheckBox( System::Windows::Forms::CheckBox^ cb )
    {
        if( cb->Checked ) return "yes";
        else return "no";
    }
    //-------------------------------------------------------------------------
    // Any checking of particular inputs should be done here, to prevent the file
    // from being generated incorrectly
    bool BaseForm::genFileInputVerificationFailed()
    {
        return false;
    }
    //-------------------------------------------------------------------------
    // Any checking of particular inputs should be done here, to prevent the file
    // from being generated incorrectly
    bool BaseForm::runtimeFileInputVerificationFailed()
    {
        return false;
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::setGenDefaults()
    {
        // Duplicating layout of template.default.gen.cfg

        // set control defaults
        PagedCheckBox->Checked = true;
        RPagingTabPage->Enabled = true;
        MapSplitterTabPage->Enabled = false;
        RunTimeTabPage->Enabled = false;

        // General
        GTerrainNameTextBox->Text = "template.default";
        GGroupNameTextBox->Text = "PLSM2";
        GHeightMapFileNameTextBox->Text = "ps_height_1k";
        GHeightMapExtensionTextBox->Text = "png";
        HeightMapExportExtensionTextBox->Text = "png";
        GColorMapFileNameTextBox->Text = "ps_texture_1k";
        GColorMapExtensionTextBox->Text = "png";
        ColorMapExportExtensionTextBox->Text = "png";
        PagedCheckBox->Checked = true;
        OutDirectoryTextBox->Text = OutputFolder + "<TerrainName>";
        GTerrainScaleXTextBox->Text = "90000";
        GTerrainScaleYTextBox->Text = "15000";
        GTerrainScaleZTextBox->Text = "90000";
        // Paged Properties
        GPageSizeTextBox->Text = "513";
        GTileSizeTextBox->Text = "65";
        GData2DFormatComboBox->Text = "HeightField";
        GMaxValueTextBox->Text = "0";
        GMinValueTextBox->Text = "0";
        // Color Map
        GColorMapStretchFactorTextBox->Text = "1";
        ColorMapSplitCheckBox->Checked = true;
        LitColorMapSplitCheckBox->Checked = false;
        // HeightMaps
        HeightMapCheckBox->Checked = true;
        InfiniteMapCheckBox->Checked = false;
        HeightMapBlurFactorTextBox->Text = "0.0f";
        EqualizeCheckBox->Checked = false;
        MiniMapCheckBox->Checked = true;
        MiniMapWidthTextBox->Text = "512";
        MiniMapHeightTextBox->Text = "512";
        // Normals
        NormalMapCheckBox->Checked = false;
        HeightNormalMapCheckBox->Checked = false;
        ColorMapGenerateCheckBox->Checked = false;
        LitColorMapGenerateCheckBox->Checked = false;
        // Splatting
        NumMatHeightSplatTextBox->Text = "4";
        GSetMaterialHeightRichTextBox->Text = 
            "MaterialHeight0=0\n" +
            "MaterialHeight1=12\n" +
            "MaterialHeight2=60\n" +
            "MaterialHeight3=75";
        GSetMaterialColorRichTextBox->Text =
            "#Sand\n" +
            "MaterialColor0=1.0f 1.0f 0.0f 1.0f\n" +
            "#Grass\n" +
            "MaterialColor1=0.13f 0.545f 0.13f 1.0f\n" +
            "#Rock\n" +
            "MaterialColor2=0.411764f 0.411764f 0.411764f 1.0f\n" +
            "#Snow\n" +
            "MaterialColor3=1.0f 0.98f 0.98f 1.0f";
        GSetSplatFileNamesRichTextBox->Text = 
            "#needs to be in maptool directory\n" +
            "SplatFilename0=splatting_sand.png\n" +
            "SplatFilename1=splatting_grass.png\n" +
            "SplatFilename2=splatting_rock.png\n" +
            "SplatFilename3=splatting_snow.png";
        AvgColorsExistsCheckBox->Checked = true;
        BaseMapCheckBox->Checked = false;
        LitBaseMapCheckBox->Checked = false;
        CoverageMapCheckBox->Checked = false;
        AlphaMapsCheckBox->Checked = false;
        AlphaSplatRGBAMapsCheckBox->Checked = false;
        RGBMapsCheckBox->Checked = false;
        // Lighting
        LightMapCheckBox->Checked = false;
        ShadowMapCheckBox->Checked = false;
        SunxTextBox->Text = "0.0f";
        SunyTextBox->Text = "0.88f";
        SunzTextBox->Text = "0.47f";
        AmbientTextBox->Text = "0.5f";
        DiffuseTextBox->Text = "0.5f";
        BlurTextBox->Text = "0.5f";
        // Real-Time Lighting
        HorizonMapCheckBox->Checked = false;
        ElevationMapCheckBox->Checked = false;
        ZHorizonCheckBox->Checked = false;
        // Visibility
        PVSMapCheckBox->Checked = false;
    }



    //-------------------------------------------------------------------------
    System::String^ BaseForm::setString (const Ogre::String &ValuetoGet,  Ogre::ConfigFile &conf )
    {
        const Ogre::String val = conf.getSetting (ValuetoGet);
        if (!val.empty())
        {
            return gcnew System::String((val).c_str());
        }
        return gcnew System::String("");
    }
    //-------------------------------------------------------------------------
    System::String^ BaseForm::setFolderPathString (const Ogre::String &ValuetoGet,  Ogre::ConfigFile &conf)
    {
        const Ogre::String FolderPath = conf.getSetting (ValuetoGet);
        if (!FolderPath.empty())
        {
            Ogre::String OutDirectory (FolderPath);

            Ogre::String BasePath, FilePath;
            Ogre::StringUtil::splitFilename(OutDirectory, BasePath, FilePath);
            if (FilePath.empty())
            {
                //Get cfg current Directory
                Ogre::FileInfoListPtr finfo =  Ogre::ResourceGroupManager::getSingleton().findResourceFileInfo (
                    "PLSM2",  "TerrainGenerator.cfg");
                Ogre::FileInfoList::iterator it = finfo->begin();
                if (it != finfo->end())
                {
                    FilePath = (it)->archive->getName();
                }
            }
            if (Ogre::StringUtil::endsWith  (FilePath, "/", true))
            {
                FilePath.resize (FilePath.size() - 1);
            }
            OutDirectory = FilePath + "/" +  BasePath; 

            return gcnew System::String((OutDirectory).c_str());//TO_CLR_STRING(OutDirectory);
        }
        return gcnew System::String("");
    }
    //-------------------------------------------------------------------------
    // Reads DeafultSettings.cfg and sets options such as where to look for
    // heightmaps, colormaps, and where to output generated files
    void BaseForm::setAppDefaults()
    {
        //default values
        HeightMapFolder = ".";
        ColorMapFolder = ".";
        OutputFolder = ".";

        /*
        Code for loading and parsing file gotten from OgrePagingLandScapeOptions.cpp
        function PagingLandScapeOptions::load(...)
        */

        std::ifstream fs;
        Ogre::String filename = "TerrainGenerator.cfg";
        fs.open(filename.c_str(), std::ios::in | std::ios::binary);

        /* Set up the options : List of map associated with map names.*/
        Ogre::ConfigFile config;

        if (fs)
        {
            // Wrap as a stream
            Ogre::DataStreamPtr stream(
                new Ogre::FileStreamDataStream(filename, &fs, false));
            config.load(stream);

            //get values from config file
            HeightMapFolder = setString ("HeightMapFolder",  config );
            ColorMapFolder = setString ("ColorMapFolder",  config );
            OutputFolder = setString ("OutputFolder",  config );
        }
        else
        {
            // otherwise try resource system
            Ogre::DataStreamPtr stream = 
                Ogre::ResourceGroupManager::getSingleton().openResource(filename);
            config.load(stream);

            //get values from config file
            // get complete folder path
            HeightMapFolder = setFolderPathString ("HeightMapFolder",  config );
            ColorMapFolder = setFolderPathString ("ColorMapFolder",  config );
            OutputFolder= setFolderPathString ("OutputFolder",  config );
        }

        HeightMapFolder = HeightMapFolder->Replace("/", "\\");
        ColorMapFolder = ColorMapFolder->Replace("/", "\\");
        OutputFolder = OutputFolder->Replace("/", "\\");

        HeightMapFolder = Environment::CurrentDirectory->Replace("\\", "\\") + "\\" + HeightMapFolder + "\\";
        ColorMapFolder = Environment::CurrentDirectory->Replace("\\", "\\") + "\\" + ColorMapFolder + "\\";
        OutputFolder = Environment::CurrentDirectory->Replace("\\", "\\") + "\\" + OutputFolder + "\\";

        // update Visual Component
        OutDirectoryTextBox->Text = OutputFolder + "<TerrainName>";

		createAndAddFolder(HeightMapFolder);
		createAndAddFolder(ColorMapFolder);
		createAndAddFolder(OutputFolder);
    }
	//-------------------------------------------------------------------------
	System::Void BaseForm::createAndAddFolder( System::String^ FolderPath )
	{
		Ogre::ResourceGroupManager* rgm = Ogre::ResourceGroupManager::getSingletonPtr();

		// Make sure output folder exists!
		if( !System::IO::Directory::Exists(FolderPath) )
		{
			// If directory does not exist, create it!
			System::IO::Directory::CreateDirectory(FolderPath);
		}
		// Add output folder to resource path, to use produced gen and runtime cfg files
		DECLARE_OGRE_STRING(folder,FolderPath);
		// removing a location that doesn't exist does nothing, so remove then add works well here
		rgm->removeResourceLocation(folder,"PLSM2");
		rgm->addResourceLocation(
			folder,
			"FileSystem",
			"PLSM2"
			);
	}
	//-------------------------------------------------------------------------
	System::Void BaseForm::RunMapsplitterButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        createMapToolFile();

        RunMapsplitterButton->Enabled = false;
        RunMapsplitterButton->Refresh();
        MapSplitterStatusTextBox->Text = "Running...";
        MapSplitterStatusTextBox->Refresh();

        // Run Mapsplitter

        mMapUtil->LoadSingleMap(Ogre::String((char*) Marshal::StringToHGlobalAnsi(GTerrainNameTextBox->Text).ToPointer()) + ".gen.cfg", "PLSM2");
        mMapUtil->process();


        MapSplitterStatusTextBox->Text = "Done";
        RunMapsplitterButton->Enabled = true;
        RunMapsplitterButton->Refresh();

        RunTimeTabPage->Enabled = true;
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::GGenerateCFGButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        if( genFileInputVerificationFailed() ) return;
        createGenFile();

        GEditCFGButton->Enabled = true;
        MapSplitterTabPage->Enabled = true;
        RunTimeTabPage->Enabled = false;

        populateMapToolData();

        // Autofilled values - Must be same in Runtime as in Gen CFG
        /*
        GroupName
        ScaleX
        ScaleY
        ScaleZ
        PageSize
        TileSize
        Data2DFormat
        MaxValue
        MinValue
        ImageStretchFactor
        MaterialHeight
        MaterialColor
        SplatFilename
        */

        // Won't be used in runtime cfg file, just here for convenience
        RHeightMapTextBox->Text = GHeightMapFileNameTextBox->Text + "." + GHeightMapExtensionTextBox->Text;
        RColorMapTextBox->Text = GColorMapFileNameTextBox->Text + "." + GColorMapExtensionTextBox->Text;

        RTerrainNameTextBox->Text = GTerrainNameTextBox->Text;
        RGroupNameTextBox->Text = GGroupNameTextBox->Text;
        RTerrainScaleXTextBox->Text = GTerrainScaleXTextBox->Text;
        RTerrainScaleYTextBox->Text = GTerrainScaleYTextBox->Text;
        RTerrainScaleZTextBox->Text = GTerrainScaleZTextBox->Text;
        RPageSizeTextBox->Text = GPageSizeTextBox->Text;
        RTileSizeTextBox->Text = GTileSizeTextBox->Text;
        RData2DFormatTextBox->Text = GData2DFormatComboBox->Text;
        RMaxValueTextBox->Text = GMaxValueTextBox->Text;
        RMinValueTextBox->Text = GMinValueTextBox->Text;
        RColorMapStretchFactorTextBox->Text = GColorMapStretchFactorTextBox->Text;
        RSetMaterialHeightRichTextBox->Text = GSetMaterialHeightRichTextBox->Text;
        RSetMaterialColorRichTextBox->Text = GSetMaterialColorRichTextBox->Text;
        RSetSplatFileNamesRichTextBox->Text = GSetSplatFileNamesRichTextBox->Text;
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::GEditCFGButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        Process^ notePad = gcnew Process();

        notePad->StartInfo->FileName = "notepad.exe";
		notePad->StartInfo->Arguments = OutputFolder + GTerrainNameTextBox->Text + ".gen.cfg";

        notePad->Start();
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::QuitButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        Close();
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::HeightMapLoadButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        // backup of current working directory, which is restored
        System::String^ backupCurrentDir = Environment::CurrentDirectory;

        // find files of supported type: .png, .raw
        OpenFileDialog^ openFileDialog1 = gcnew OpenFileDialog();
        openFileDialog1->InitialDirectory = HeightMapFolder;
        openFileDialog1->Filter = "Greyscale PNG files (*.png)|*.png|Greyscale RAW files (*.raw)|*.raw";
        openFileDialog1->Title = "Load HeightMap";
        openFileDialog1->ShowDialog();    
        openFileDialog1->RestoreDirectory = true;

        if(openFileDialog1->FileName != "")
        {
            // I'm not sure why, but opening the file changes the current working directory!
            // This caused 2 hours of pain! The Current Directory MUST be restored for OGRE
            // to use its resources properly!
            Environment::CurrentDirectory = backupCurrentDir;

            // Autofilled values:
            /*
            HeightMapFileName - both CFGs
            HeightMapExtension - both CFGs
            HeightMapExportExtension - .gen.cfg
            */
            System::String^ HeightMapFileFullName = openFileDialog1->FileName->Substring(openFileDialog1->FileName->LastIndexOf("\\")+1);
            System::String^ HeightMapFileName = HeightMapFileFullName->Substring(0,HeightMapFileFullName->IndexOf('.'));
            System::String^ HeightMapExtension = HeightMapFileFullName->Substring(HeightMapFileFullName->IndexOf('.')+1);

            RHeightMapTextBox->Text = HeightMapFileFullName;
            GHeightMapFileNameTextBox->Text = HeightMapFileName;
            RHeightMapFileNameTextBox->Text = HeightMapFileName;

            GHeightMapExtensionTextBox->Text = HeightMapExtension;
            RHeightMapExtensionTextBox->Text = HeightMapExtension;
            HeightMapExportExtensionTextBox->Text = HeightMapExtension;
        }
        else Environment::CurrentDirectory = backupCurrentDir;
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::ImageMapLoadButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        // backup of current working directory, which is restored
        System::String^ backupCurrentDir = Environment::CurrentDirectory;

        // find files of supported type: .png, .raw
        OpenFileDialog^ openFileDialog1 = gcnew OpenFileDialog();
        openFileDialog1->InitialDirectory = ColorMapFolder;
        openFileDialog1->Filter = "Image Files(*.BMP;*.JPG;*.PNG)|*.BMP;*.JPG;*.PNG|All files (*.*)|*.*"; 
        openFileDialog1->Title = "Load Image";
        openFileDialog1->ShowDialog();
        openFileDialog1->RestoreDirectory = true;

        if(openFileDialog1->FileName != "")
        {
            // I'm not sure why, but opening the file changes the current working directory!
            // This caused 2 hours of pain! The Current Directory MUST be restored for OGRE
            // to use its resources properly!
            Environment::CurrentDirectory = backupCurrentDir;

            // Autofilled values:
            /*
            ImageFileName - both CFGs
            ImageExtension - both CFGs
            */
            System::String^ ImageFileFullName = openFileDialog1->FileName->Substring(openFileDialog1->FileName->LastIndexOf("\\")+1);
            System::String^ ImageFileName = ImageFileFullName->Substring(0,ImageFileFullName->IndexOf('.'));
            System::String^ ImageExtension = ImageFileFullName->Substring(ImageFileFullName->IndexOf('.')+1);

            RColorMapTextBox->Text = ImageFileFullName;
            GColorMapFileNameTextBox->Text = ImageFileName;
            RColorMapFileNameTextBox->Text = ImageFileName;

            GColorMapExtensionTextBox->Text = ImageExtension;
            RColorMapExtensionTextBox->Text = ImageExtension;
            ColorMapExportExtensionTextBox->Text = ImageExtension;
        }
        else Environment::CurrentDirectory = backupCurrentDir;
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::PagedCheckBox_CheckedChanged(System::Object^  sender, System::EventArgs^  e) 
    {
        GPagingTabPage->Enabled = PagedCheckBox->Checked;
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::CreateRunTimeCFGButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        if( runtimeFileInputVerificationFailed() ) return;
        createRunTimeFile();

		EditRunTimeCFGButton->Enabled = true;
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::EditRunTimeCFGButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        Process^ notePad = gcnew Process();

        notePad->StartInfo->FileName = "notepad.exe";
        notePad->StartInfo->Arguments = OutputFolder + RTerrainNameTextBox->Text + ".cfg";

        notePad->Start();
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::ResourceFormatComboBox_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) 
    {
        /*
        Already in Path
        FileSystem
        Zip
        */

        if( ResourceFormatComboBox->Text == "Already in Path" )
        {
            FormatLabel->Text = "";
            FormatTextBox->Text = "";
        }
        else 
        {
            FormatLabel->Text = ResourceFormatComboBox->Text + "=";
            FormatTextBox->Text = "";
        }
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::GSetDefaultsButton_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        setGenDefaults();
    }
    //-------------------------------------------------------------------------
    System::Void BaseForm::HeightMapHelp_Click(System::Object^  sender, System::EventArgs^  e) 
    {
        // add 5 spaces to move text from under cursor
        HelpToolTip->Show("     8 or 16 bit Grayscale Image used to set the terrain depth",HeightMapHelp);
    }
}

